RUN GUIDE - Stock Up/Down + Reporting + Live Prediction
Target Python version: 3.10

1) Create & activate virtual environment (Python 3.10)
   - Linux/macOS:
     python3.10 -m venv venv
     source venv/bin/activate
   - Windows (PowerShell):
     py -3.10 -m venv venv
     .\venv\Scripts\Activate.ps1
   - Windows (cmd):
     py -3.10 -m venv venv
     venv\Scripts\activate.bat

2) Upgrade pip & install requirements:
   pip install --upgrade pip
   pip install -r requirements.txt

   Note: On Windows, cvxpy may require Microsoft Visual C++ Build Tools.
   If cvxpy install fails, try:
     pip install osqp
     pip install cvxpy

3) VSCode:
   - Open the folder 'stock-updown-project' in VSCode.
   - Select the Python interpreter from the venv you created (Ctrl+Shift+P -> Python: Select Interpreter).
   - Open a terminal in VSCode and run the commands below.

4) Example run (full pipeline) -- enter the tickers you want when running commands:( src)
   # Step A - Fetch historical data for tickers (this script will download data only when you provide ticker names)
   python main.py --tickers RELIANCE.NS TCS.NS HDFCBANK.NS --fetch

   # Step B - Prepare features (after fetch)
   python main.py --tickers RELIANCE.NS TCS.NS HDFCBANK.NS --prepare

   # Step C - Train model
   python main.py --tickers RELIANCE.NS TCS.NS HDFCBANK.NS --train

   # Step D - Live prediction (simulated using latest daily bar), generate reports and portfolio weights:
   python main.py --tickers RELIANCE.NS TCS.NS HDFCBANK.NS --live

5) Behavior:
   - The code is configured so that it only downloads and analyzes data for tickers you explicitly pass via the --tickers argument.
   - Reports are generated in the 'reports/' folder as markdown files.
   - The model saved in 'models/' and processed features in 'data/processed/'.

6) Troubleshooting:
   - If yfinance returns empty data for a ticker, verify the ticker symbol (e.g., RELIANCE.NS)
   - If cvxpy fails to install, check OS-specific install instructions: https://www.cvxpy.org/install/index.html
   - For production real-time streaming, integrate broker APIs (Zerodha Kite / FYERS / Tradient) into predict_live.py.

7) Contact:
   - This package was generated by an assistant to run in VSCode. If you need modifications (Streamlit dashboard, broker adapter, more tickers), ask for them.
